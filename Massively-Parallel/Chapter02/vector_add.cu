// Friday, January 24, 2025
// Generated by CoPilot that is now free for VSCode!

#include <iostream>
#include <cuda_runtime.h>
#include <chrono>
#include <cstdlib>

// CUDA kernel for vector addition
__global__ void vectorAdd(const float *A, const float *B, float *C, int N) {
    int i = blockDim.x * blockIdx.x + threadIdx.x;
    if (i < N) {
        C[i] = A[i] + B[i];
    }
}

// Function to initialize vectors with random floats
void initializeVectors(float *A, float *B, int N) {
    for (int i = 0; i < N; ++i) {
        A[i] = static_cast<float>(rand()) / RAND_MAX;
        B[i] = static_cast<float>(rand()) / RAND_MAX;
    }
}

// Function to perform vector addition and measure execution time
void benchmarkVectorAdd(int N, int blockSize) {
    size_t size = N * sizeof(float);
    
    // Allocate memory on host
    float *h_A = (float *)malloc(size);
    float *h_B = (float *)malloc(size);
    float *h_C = (float *)malloc(size);

    // Initialize vectors on host
    initializeVectors(h_A, h_B, N);

    // Allocate memory on device
    float *d_A, *d_B, *d_C;
    cudaMalloc((void **)&d_A, size);
    cudaMalloc((void **)&d_B, size);
    cudaMalloc((void **)&d_C, size);

    // Copy vectors from host to device
    cudaMemcpy(d_A, h_A, size, cudaMemcpyHostToDevice);
    cudaMemcpy(d_B, h_B, size, cudaMemcpyHostToDevice);

    // Launch the Vector Add CUDA Kernel with different block sizes
    int blocksPerGrid = (N + blockSize - 1) / blockSize;
    auto start = std::chrono::high_resolution_clock::now();
    vectorAdd<<<blocksPerGrid, blockSize>>>(d_A, d_B, d_C, N);
    cudaDeviceSynchronize();
    auto end = std::chrono::high_resolution_clock::now();
    std::chrono::duration<float, std::milli> duration = end - start;

    // Copy result from device to host
    cudaMemcpy(h_C, d_C, size, cudaMemcpyDeviceToHost);

    // Print the execution time
    std::cout << "Block size: " << blockSize << " - Time: " << duration.count() << " ms\n";

    // Free device memory
    cudaFree(d_A);
    cudaFree(d_B);
    cudaFree(d_C);

    // Free host memory
    free(h_A);
    free(h_B);
    free(h_C);
}

int main(int argc, char **argv) {
    int exponent = 24; // Default exponent value
    if (argc > 1) {
        exponent = std::atoi(argv[1]);
    }
    int N = 1 << exponent; // Number of elements
    int blockSizes[] = {32, 64, 128, 256, 512, 1024};

    std::cout << "Number of elements: " << N << "\n";
    for (int blockSize : blockSizes) {
        benchmarkVectorAdd(N, blockSize);
    }

    return 0;
}
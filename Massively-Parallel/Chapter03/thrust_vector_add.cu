// Generated by ChatGPT

#include <iostream>
#include <thrust/host_vector.h>
#include <thrust/device_vector.h>
#include <thrust/transform.h>
#include <thrust/functional.h>

// Kernel for vector addition
struct vector_add {
    __host__ __device__
    float operator()(const float& x, const float& y) const {
        return x + y;
    }
};

int main(int argc, char* argv[]) {
    
    if (argc != 2) {
        std::cerr << "Usage: " << argv[0] << " <size>" << std::endl;
        return -1;
    }

    // Get the size of the vectors from command line
    int N = std::stoi(argv[1]);
    
    // Initialize host vectors
    thrust::host_vector<float> h_A(N);
    thrust::host_vector<float> h_B(N);

    // Fill host vectors with some values
    for (int i = 0; i < N; i++) {
        h_A[i] = static_cast<float>(i);
        h_B[i] = static_cast<float>(i * 2);
    }

    // Transfer data to the device
    thrust::device_vector<float> d_A = h_A;
    thrust::device_vector<float> d_B = h_B;
    thrust::device_vector<float> d_C(N);

    // Perform vector addition using thrust::transform
    thrust::transform(d_A.begin(), d_A.end(), d_B.begin(), d_C.begin(), vector_add());

    // Transfer result back to host
    thrust::host_vector<float> h_C = d_C;

    // Print the result
    // for (int i = 0; i < N; i++) {
    for (int i = 0; i < 10; i++) {
        std::cout << "C[" << i << "] = " << h_C[i] << std::endl;
    }

    return 0;
}

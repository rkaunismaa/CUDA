// Generated by CoPilot

#include <cuda_runtime.h>
#include <opencv2/opencv.hpp>
#include <iostream>

// CUDA kernel for converting a color image to grayscale
__global__ void grayscaleKernel(unsigned char* input, unsigned char* output, int width, int height) {
    int col = blockIdx.x * blockDim.x + threadIdx.x;
    int row = blockIdx.y * blockDim.y + threadIdx.y;

    if (col < width && row < height) {
        int offset = (row * width + col) * 3;
        unsigned char r = input[offset];
        unsigned char g = input[offset + 1];
        unsigned char b = input[offset + 2];

        // Convert to grayscale using the formula
        // grayscale = 0.299 * R + 0.587 * G + 0.114 * B
        unsigned char gray = (unsigned char)(0.299f * r + 0.587f * g + 0.114f * b);

        // Write the grayscale value to the output image
        output[row * width + col] = gray;
    }
}

// Function to convert the image to grayscale using CUDA
void convertToGrayscale(unsigned char* input, unsigned char* output, int width, int height) {
    unsigned char *d_input, *d_output;
    size_t colorImageSize = width * height * 3 * sizeof(unsigned char);
    size_t grayImageSize = width * height * sizeof(unsigned char);

    // Allocate memory on the GPU
    cudaMalloc((void**)&d_input, colorImageSize);
    cudaMalloc((void**)&d_output, grayImageSize);

    // Copy the input image to the GPU
    cudaMemcpy(d_input, input, colorImageSize, cudaMemcpyHostToDevice);

    // Define the block and grid sizes
    dim3 dimBlock(16, 16);
    dim3 dimGrid((width + dimBlock.x - 1) / dimBlock.x, (height + dimBlock.y - 1) / dimBlock.y);

    // Launch the grayscale kernel
    grayscaleKernel<<<dimGrid, dimBlock>>>(d_input, d_output, width, height);

    // Copy the grayscale image back to the host
    cudaMemcpy(output, d_output, grayImageSize, cudaMemcpyDeviceToHost);

    // Free the allocated GPU memory
    cudaFree(d_input);
    cudaFree(d_output);
}

int main(int argc, char** argv) {
    // Check for the correct number of arguments
    if (argc != 3) {
        std::cerr << "Usage: " << argv[0] << " <source_image> <target_image>" << std::endl;
        return -1;
    }

    std::string sourceImage = argv[1];
    std::string targetImage = argv[2];

    // Read the input image using OpenCV
    cv::Mat inputImage = cv::imread(sourceImage, cv::IMREAD_COLOR);
    if (inputImage.empty()) {
        std::cerr << "Error: Could not open or find the image." << std::endl;
        return -1;
    }

    int width = inputImage.cols;
    int height = inputImage.rows;

    // Allocate memory for the output image
    cv::Mat outputImage(height, width, CV_8UC1);

    // Convert the image to grayscale
    convertToGrayscale(inputImage.data, outputImage.data, width, height);

    // Save the output image using OpenCV
    cv::imwrite(targetImage, outputImage);

    return 0;
}